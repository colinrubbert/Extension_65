{"version":3,"sources":["manifest_content_calendar_interview_bundle.js"],"names":["window","BaseInterviewSupportedSite","LoggableClass","constructor","pageType","config","super","this","_config","CANDIDATE_SHORTLINK_URL_MATCH_RE","INTERVIEW_URL_MATCH_RE","PAGE_TYPE","cssClass","_debug","_resetPageInfo","log","$parent","createBtnInsertFn","joinBtnInsertFn","getInterviewInfoFn","setInterviewBodyTextFn","removeInterviewBodyTextFn","poll","interviewUrl","showCreateButton","showDeleteButton","showCreateButtonRow","pageInfo","bind","showJoinButton","update","Error","static","_stripInterviewLinks","html","urlMatchStr","removeCandidateLinkRe","RegExp","source","removeInterviewerLinkRe","removeTosLineRe","removeJoiningLineRe","strippedhtml","replace","GCalInterviewSite","WITH_ZOOM_WIDTH","_setButtonClass","test","location","href","extra","$","length","C","gcal","$modalElem","modal","type","find","title","first","closest","getSaveBtn","button","filter","save","$saveBtn","eventSelected","event","selected","eventTab","buttonHtml","after","$modalInterior","inside","zoom","setAttribute","e","$locBtn","sub","$expandableRow","expandable","before","$titleRow","titleRow","date","startDate","text","split","shift","year","Date","getFullYear","pop","addTimeBtn","addTime","addTimeButtonExists","startTime","endTime","val","timezone","gmtOffset","_getTimezoneInfo","pathname","includes","page","details","parent","tabPanel","prepend","$top","roleMain","dateVal","interior","isCreate","cb","$descBtn","description","click","setTimeout","$editable","editableDescription","$blob","children","editableBlob","innerHTML","descButton","dispatchEvent","Event","bubbles","tzData","JSON","parse","document","getElementById","txData","textContent","tzRe","$tzButton","not","content","innerText","tzString","tzObj","tzi","match","parseInt","globals","TEMPLATES","RELAY","UI","CREATE_BUTTON_ID","JOIN_BUTTON_ID","Interview","PageFeatureBaseClass","pageInfoInstance","showReminder","configTemplate","_init","getInfoForPage","matchesUrl","_configTemplate","interviewUrlMatch","logNoStore","removeExisting","explicitId","ids","remove","async","pgInfo","$existingCreateBtn","$existingJoinBtn","buttonId","now","tdata","iconUrl","UTILS","extensionUrl","videoIconUrl","id","disabled","cssDisabledClass","meta","createButtonMeta","build","markUiImpression","stringHashCyrb53","indeedIconUrl","interviewGuid","guidFromInterviewUrl","url","exec","interviewInfo","errors","push","_error","loading","language","navigator","_setApiCallTimer","send","levels","iframe","info","deleteInterview","guid","_bindEvents","body","on","CONTENT_UTILS","isOrphaned","stopImmediatePropagation","preventDefault","target","hasClass","createInterview","data","btnId","markUiButtonClick","_cleanupUi","$existing","_clearApiCallTimer","backupText","candidate_short_url","lobby_url","join","descriptionUpdated","localSend","value","msg1","notifications","_notification","interviewDeleted","deleted","errs","message","success","reminderSeen","_shouldInitialize","reset","interviewGenerated","IRX","_forCopySelectInput","input","tagName","toLowerCase","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","select","_copyToClipboard","isHtml","copy","hideStyle","createElement","contentEditable","appendChild","focus","execCommand","_forCopyInput","state","STATE","ContentState","setup","console","error","irxInterview","onOrphaned","cleanup","onUserChange","loggedIn","userInfo","proctorGroups","preferences","reminders","interviewEnabled","configTemplates","get","markReminderSeen"],"mappings":"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","file":"manifest_content_calendar_interview_bundle.js","sourcesContent":["/* globals LoggableClass */\n\nwindow.BaseInterviewSupportedSite = window.BaseInterviewSupportedSite || ((window) => {\n    \n    class BaseInterviewSupportedSite extends LoggableClass {\n        constructor(pageType, config) {\n            super(false);\n            this._config = config;\n            this.CANDIDATE_SHORTLINK_URL_MATCH_RE = /https:\\/\\/(linkr|l)\\.(indeed\\.com|sandbox\\.qa\\.indeed\\.net)\\/[^\\/]+\\//gi;\n            this.INTERVIEW_URL_MATCH_RE = /https:\\/\\/interviews\\.(sandbox\\.)?(qa\\.)?indeed\\.(net|com)\\/(employers\\/)?events\\/[^\\/]+\\//gi;\n\n            // these are set only initially\n            this.PAGE_TYPE = pageType;\n\n            this.cssClass = null;\n            this._debug = false;\n\n            this._resetPageInfo();\n\n            this.log('New interview supported type created', pageType);\n        }\n\n        _resetPageInfo(){\n            // things that are set/change with this.update() called\n            this.$parent;\n            this.createBtnInsertFn;             // function to use when adding create button\n            this.joinBtnInsertFn;               // function to use for adding join button\n            this.getInterviewInfoFn;            // function to gather the needed info to creat the interview\n            this.setInterviewBodyTextFn;        // function to set the text in the interview body when generated\n            this.removeInterviewBodyTextFn;     // function to remove interview text from the body.\n            this.poll = true;                   // should we continue polling the page if we're shwoing a button?\n            this.interviewUrl = null;           // the interview URL detected on the page\n            this.showCreateButton = false;      // should we show the create button?\n            this.showDeleteButton = false;      // should we show the delete button?\n            this.showCreateButtonRow = false;   // should we show the create button as a row?\n        }\n\n        get pageInfo(){\n            let pgInfo = {\n                $parent: this.$parent,\n                poll: this.poll,\n                interviewUrl: this.interviewUrl,\n                cssClass: this.cssClass,\n                pageType: this.PAGE_TYPE,\n                showCreateButton: this.showCreateButton,\n                showCreateButtonRow: this.showCreateButtonRow,\n                showDeleteButton: this.showDeleteButton,\n                createBtnInsertFn: this.createBtnInsertFn ? this.createBtnInsertFn.bind(this) : null,\n                joinBtnInsertFn: this.joinBtnInsertFn ? this.joinBtnInsertFn.bind(this) : null,\n                getInterviewInfoFn: this.getInterviewInfoFn ? this.getInterviewInfoFn.bind(this) : null,\n                setInterviewBodyTextFn: this.setInterviewBodyTextFn ? this.setInterviewBodyTextFn.bind(this) : null,\n                removeInterviewBodyTextFn: this.removeInterviewBodyTextFn ? this.removeInterviewBodyTextFn.bind(this) : null\n            };\n            return pgInfo;\n        }\n\n        // override if needed\n        showJoinButton(interviewUrl){\n            return true;\n        }\n\n        // function that checks the page to see if things are different, set new functions, etc\n        update(){\n            throw new Error('Must implement');\n        }\n\n        // return boolean value, does this site match (i.e. are we on that site)\n        static matchesUrl(){\n            throw new Error('Must Implement');\n        }\n\n        _stripInterviewLinks(html){\n            // This function makes 2 regexes that will strip the candidate and interviewer link lines\n            // The annoyance here is that google rewrites URLs and if styling is changed, it can get screwed up too\n            // so these regexpes are quite complicated and generous, but they work\n\n            const urlMatchStr = '([a-z0-9:\\\\/.?&_=;%-])+';\n\n            let removeCandidateLinkRe = new RegExp('(<b>)?Candidate Link:(<\\/b>)? ' +\n                '(<a href=\"'+urlMatchStr+'\">)?(' + this.CANDIDATE_SHORTLINK_URL_MATCH_RE.source + '){1}(<\\/a>)?(<br>)*', 'gi');\n            this.log('removeCandidateLinkRe', removeCandidateLinkRe.source);\n\n            let removeInterviewerLinkRe = new RegExp('(<b>)?Interviewer Link:(<\\/b>)? ' +\n                '(<a href=\"'+urlMatchStr+'\">)?(' + this.INTERVIEW_URL_MATCH_RE.source + '){1}(<\\/a>)?(<br>)*', 'gi');\n            this.log('removeInterviewerLinkRe', removeInterviewerLinkRe.source);\n\n            const removeSigninLineRe = /If prompted, please click (<b>)?Sign in with Google(<\\/b>)? using your Indeed email.(<br>)*/gi;\n            const removeTosLineRe = new RegExp('By continuing, you agree to our (<a href=\"' +\n                urlMatchStr + '\">)?Terms, Cookies, &amp; Privacy Policies(<\\/a>)?.(<br>)*', 'gi');\n            const removeJoiningLineRe = new RegExp('(<a href=\"'+urlMatchStr +'\">)?Joining Instructions(<\\/a>)?.(<br>)*', 'gi');\n\n            const strippedhtml = html.replace(removeCandidateLinkRe, '').replace(removeInterviewerLinkRe, '')\n                .replace(removeSigninLineRe, '').replace(removeTosLineRe,'').replace(removeJoiningLineRe,'');\n\n            this.log('New HTML after strip links', strippedhtml);\n            return strippedhtml;\n        }\n    }\n\n    return BaseInterviewSupportedSite;\n})(window);\n\n'use strict';\n/* globals BaseInterviewSupportedSite */\n\nwindow.GCalInterviewSite = window.GCalInterviewSite || ((window) => {\n\n    class GCalInterviewSite extends BaseInterviewSupportedSite{\n        constructor(config) {\n            super(GCalInterviewSite.pageType, config);\n\n            this.WITH_ZOOM_WIDTH = 700;\n            this._setButtonClass();\n\n            this.update();\n        }\n\n        static get pageType(){\n            return 'google';\n        }\n\n        static matchesUrl(){\n            return /https:\\/\\/calendar\\.google\\.com\\/calendar\\/.+/.test(window.location.href);\n        }\n\n        _setButtonClass(extra){\n            this.cssClass = 'irx_google_interview_btn';\n        }\n\n        showJoinButton(interviewUrl){\n            // validate that the Indeed google app isn't installed, and already added a line for the join interview button\n            let $addonButton = $(`a[href*=\"${interviewUrl}\"]:contains(\"Join Indeed Interview\")`);\n            return $addonButton.length ? false : true; // don't show the button if it's already there from addons\n        }\n\n        update(){\n            this._resetPageInfo();\n\n            const C = this._config.gcal;\n\n            // three different views to support\n            // 1 - Creating a new event\n            // 2 - Editing an existing event\n            // 3 - Viewing an existing event\n\n            // NEW or EXISTING event modal\n            let $modalElem = $(C.modal.type).find(C.modal.title);\n\n            if($modalElem.length > 0){\n                this.log('Detected Modal view (new or existing event)');\n\n                // if we can find the modal that we know is for an event create or view, add the buttons if needed\n                // modal.type\n                this.$parent = $modalElem.first().closest(C.modal.type);\n\n                // When inserting the button make sure modal is still there and insert before save button\n                // IF zoom added a button, force width of the modal even wider to accomodate\n                const getSaveBtn = () => {\n                    return this.$parent.find(C.button.type).filter(C.button.save);\n                };\n\n                let $saveBtn = getSaveBtn();\n                let eventSelected = this.$parent.find(C.event.selected).length || this.$parent.find(C.event.eventTab).length === 0;\n\n                if($saveBtn.length && eventSelected) {\n                    this.showCreateButton = true;\n                    this.createBtnInsertFn = (buttonHtml) => {\n                        const $saveBtn = getSaveBtn();\n                        if ($saveBtn.length) {\n                            $saveBtn.after(buttonHtml);\n                            // IF zoom is also installed we need to force the width wider to accomodate both buttons\n                            try {\n                                const $modalInterior = this.$parent.find(C.modal.inside);\n                                const zoomInstalled = $modalInterior.find(C.button.zoom).length;\n                                if (zoomInstalled) $modalInterior[0].setAttribute('style', `min-width: ${this.WITH_ZOOM_WIDTH = '700'}px !important`);\n                            } catch (e) {\n                                this.log('Error making modal wide to fit with Zoom button!');\n                            }\n                        } else {\n                            this.log('Not adding \\'Create\\' button to page, \\'Save\\' button is not present');\n                        }\n                    };\n                }\n\n\n                this.joinBtnInsertFn = (buttonHtml) => {\n\n                    const $locBtn = this.$parent.find(C.modal.sub.location); // present for adding NEW\n\n                    const $modalInterior = this.$parent.find(C.modal.inside);\n                    if($locBtn.length){\n                        const $expandableRow = $locBtn.closest(C.modal.sub.expandable);\n                        if($expandableRow.length){\n                            $expandableRow.before(buttonHtml);\n                        }else{\n                            this.log('Not adding interview join button, no location/rooms expandable row');\n                        }\n                    }else{\n                        if($modalInterior.length){\n                            const $titleRow = $modalInterior.find(C.modal.sub.titleRow);\n                            if($titleRow.length){\n                                $titleRow.after(buttonHtml);\n                            }else{\n                                this.log('Not adding interview join button, cant find title row');\n                            }\n                        }else {\n                            this.log('Not adding interview join button, no location button or modal interior');\n                        }\n                    }\n                };\n\n                this.getInterviewInfoFn = () => {\n                    // date in format \"Wednesday, Jan 13 [optional], 2023\"\n                    let date = this.$parent.find(C.modal.sub.startDate).text();\n                    date = date.split(', '); // 3 parts includes year else it's current year\n                    date.shift(); // remove weekday (i.e. 'Wednesday')\n                    let year = date.length === 1 ? (new Date().getFullYear()) : date.pop();\n\n                    let addTimeBtn = this.$parent.find(C.modal.sub.addTime);\n                    let addTimeButtonExists = addTimeBtn ? addTimeBtn.length > 0 : false;\n\n                    let startTime = this.$parent.find(C.modal.sub.startTime).text();\n                    let endTime = this.$parent.find(C.modal.sub.endTime).text();\n\n                    let titleElem = this.$parent.find(C.modal.title);\n\n                    let title = titleElem.val();\n                    const [timezone, gmtOffset] = this._getTimezoneInfo(this.$parent);\n\n                    return {date: date[0], startTime, endTime, year, title, timezone, gmtOffset, addTimeButtonExists};\n                };\n\n            }else if(window.location.pathname.split('/').includes('eventedit')\n            || $(C.page.type).length\n            ){\n            // Full page window event view\n                this.log('Detected full-page window for event edit');\n\n                this.$parent = $(C.page.type).find(C.page.details);\n                if(this.$parent.length){\n                    // move the parent ref up to the larger element that includes the interview text\n                    this.$parent = this.$parent.parent();\n                    this.$parent = this.$parent.parent();\n                }\n\n                // tabEventDetails\n                this.showCreateButtonRow = true;\n                this.showDeleteButton = true;\n                this.createBtnInsertFn = this.joinBtnInsertFn = (buttonHtml) => {\n                    const $tabPanel = $(C.page.tabPanel).first();\n                    $tabPanel.prepend(buttonHtml);\n                };\n\n                this.getInterviewInfoFn = () => {\n                    const $top = this.$parent.closest(C.page.roleMain);\n\n                    let date,\n                        year,\n                        dateVal = $top.find(C.page.interior.startDate).val();\n\n                    if(dateVal) {\n                        // Format is 'Aug 9, 2022'\n                        [date, year] = dateVal.split(',');\n                    }\n\n                    let startTime = $top.find(C.page.interior.startTime).val();\n                    let endTime = $top.find(C.page.interior.endTime).val();\n\n                    let title = $top.find(C.page.interior.title).val();\n                    const [timezone, gmtOffset] = this._getTimezoneInfo(this.$parent.closest(C.page.interior.isCreate));\n\n                    return {date, startTime, endTime, year, title, timezone, gmtOffset};\n                };\n\n            }\n\n            // NOTE this function works the same in every view of the google calendar, relative to $parent\n            this.removeInterviewBodyTextFn = (cb) => {\n                // cb = (success) =>\n                let $descBtn = this.$parent.find(C.event.description);\n                if($descBtn.length){\n                    $descBtn.click();\n                }\n                setTimeout((() => {\n                    let $editable = this.$parent.find(C.event.editableDescription);\n                    if ($editable.length) {\n                        let $blob = $editable.children(C.event.editableBlob);\n                        $editable.html(this._stripInterviewLinks(($blob.length ? $blob : $editable)[0].innerHTML));\n                        cb(true);\n                    } else {\n                        cb(false);\n                    }\n                }).bind(this), 500);\n            };\n\n            // NOTE this function works the same in every view of the google calendar, relative to $parent\n            this.setInterviewBodyTextFn = (html, cb) => {\n                let $descBtn = this.$parent.find(C.event.descButton);\n                if($descBtn.length){\n                    $descBtn.click();\n                }\n\n                setTimeout(() => {\n                    let $editable = this.$parent.find(C.event.editableDescription);\n                    if ($editable.length) {\n                        $editable.prepend(html);\n                        $editable[0].dispatchEvent(new Event('keyup', {bubbles: true}));\n                        cb(true);\n                    } else {\n                        this.log('Unable to copy link to calendar text, $editable element not found');\n                        cb(false);\n                    }\n                }, 500);\n            };\n        }\n\n        _getTimezoneInfo($parent){\n            const C = this._config.gcal;\n            let timezone, gmtOffset;\n            try{\n                const tzData = JSON.parse(document.getElementById(C.event.txData).textContent)[0];\n\n                // use regexp to find div with tooltip and ariaLabel like \"(GMT+/-10:00) Some Time\"\n                const tzRe = /^\\(GMT([+-])([0-9]{1,2}):([0-9]{2})\\)\\s.+$/i;\n\n                let $tzButton = $parent.find('span,div').not(':has(*)')\n                    .filter(function(){\n                        let content = this.innerText;\n                        return tzRe.test(content);\n                    });\n                if($tzButton.length > 0){\n                    let tzString = $tzButton[0].innerText;\n                    let tzObj = tzData.find((tzi) => {\n                        return tzi[1] == tzString;\n                    });\n                    if(tzObj){\n                        timezone = tzObj[0];\n                        let match = tzString.match(tzRe);\n                        let minutes = parseInt(match[3],10) + (60 * parseInt(match[2],10));\n                        gmtOffset = minutes * 60 * 1000;\n                        if(match[1] === '-') gmtOffset = 0 - gmtOffset;\n                    }\n                }else{\n                // if no custom timezone selected, just grab defaults\n                    if(!timezone) timezone = $('#xTimezone').text();\n                    if(!gmtOffset) gmtOffset = $('#xGmtOffset').text();\n                }\n            }catch(e){\n                this.log('Error getting timezones', e);\n            }\n\n            this.log('Timezone info: ', timezone, gmtOffset);\n\n            return [timezone, gmtOffset];\n        }\n    }\n    return GCalInterviewSite;\n})(window);\n\n/* globals IRX, PageFeatureBaseClass */\n\n(async (globals) => {\n\n    const TEMPLATES = globals.TEMPLATES;\n    const RELAY = globals.RELAY;\n    const UI = globals.UI;\n    const UI_DRAW_CHECK_INTERVAL = 100; // 100 ms debounce for mutationObserver checks\n    const $ = globals.$;\n\n    const CREATE_BUTTON_ID = 'zapinfo_create_interview_button',\n        DELETE_BUTTON_ID = 'zapinfo_delete_interview_button',\n        JOIN_BUTTON_ID = 'zapinfo_join_interview_button',\n        CSS_DISABLED_CLASS = 'zi_disabled';\n\n    class Interview extends PageFeatureBaseClass {\n        #pageInfoInstance;\n        #pageInfo = null;\n\n        constructor(showReminder, configTemplate) {\n            super('interview', false, UI_DRAW_CHECK_INTERVAL, configTemplate);\n            this._init(showReminder);\n        }\n\n        #getInfoForPage() {\n            let pageInfo;\n            if (this.#pageInfoInstance) {\n                this.#pageInfoInstance.update();\n            } else {\n                if (globals.GCalInterviewSite.matchesUrl()) {\n                    this.#pageInfoInstance = new globals.GCalInterviewSite(this._configTemplate);\n                }\n            }\n\n            if (this.#pageInfoInstance) {\n                pageInfo = this.#pageInfoInstance.pageInfo;\n\n                if (pageInfo.$parent && pageInfo.$parent.length) {\n                    // search $parent.html() to see if we can find an interview URL\n                    const interviewUrlMatch = pageInfo.$parent[0].innerHTML.match(this.#pageInfoInstance.INTERVIEW_URL_MATCH_RE);\n                    if (interviewUrlMatch && interviewUrlMatch.length) {\n                        pageInfo.interviewUrl = interviewUrlMatch[0];\n                    }\n                }\n\n                if (pageInfo.interviewUrl) {\n                    pageInfo.showJoinButton = this.#pageInfoInstance.showJoinButton(pageInfo.interviewUrl);\n                }\n            }\n\n            this.logNoStore('Info Results', pageInfo);\n            return pageInfo;\n        }\n\n        // remove any existing interview buttons\n        #removeExisting(explicitId) {\n            let ids = `#${CREATE_BUTTON_ID}, #${JOIN_BUTTON_ID}`;\n            if (explicitId) ids = `#${explicitId}, #${explicitId}_row`;\n            $(ids).remove();\n        }\n\n        // function called each interval to draw the button if needed\n        async _uiChange() {\n            this.#pageInfo = this.#getInfoForPage();\n            const pgInfo = this.#pageInfo;\n\n            let $existingCreateBtn = $('#' + CREATE_BUTTON_ID);\n            let $existingJoinBtn = $('#' + JOIN_BUTTON_ID);\n            this.log('DRAW INTERVAL', $existingCreateBtn, $existingJoinBtn);\n\n            if (!pgInfo || !pgInfo.$parent) {\n                this.#removeExisting();\n                return this.log('No draw, wrapper not present');\n            }\n\n\n            this.log(`showCreateButton/Row: ${pgInfo.showCreateButton?'1':'0'} ${pgInfo.showCreateButtonRow?'1':'0'}`, pgInfo.interviewUrl);\n            if ((pgInfo.showCreateButton || pgInfo.showCreateButtonRow) && !pgInfo.interviewUrl) {\n                if (!$existingCreateBtn.length) {\n                    const buttonId = Date.now();\n                    const tdata = {\n                        cssClass: pgInfo.cssClass,\n                        iconUrl: globals.UTILS.extensionUrl('images/indeed_i_blue.svg'),\n                        videoIconUrl: globals.UTILS.extensionUrl('images/video_icon.svg'),\n                        id: CREATE_BUTTON_ID,\n                        disabled: !!pgInfo.interviewUrl,\n                        cssDisabledClass: CSS_DISABLED_CLASS,\n                        meta: pgInfo.createButtonMeta,\n                        buttonId\n                    };\n\n                    const html = await TEMPLATES.build(`create_interview_button${pgInfo.showCreateButtonRow ? '_row' : ''}`, tdata);\n                    this.log('Add Create btn HTML', html);\n                    // verify parent is still there ?\n                    this.#removeExisting(CREATE_BUTTON_ID);\n                    pgInfo.createBtnInsertFn(html);\n                    this.markUiImpression(buttonId, 'create_button', pgInfo.pageType, 'calendar');\n\n                } else {\n                    if (pgInfo.interviewUrl) this.#removeExisting(CREATE_BUTTON_ID);\n                }\n            } else {\n                if ($existingCreateBtn.length) this.#removeExisting(CREATE_BUTTON_ID);\n            }\n\n\n            if (!$existingJoinBtn.length && pgInfo.interviewUrl && pgInfo.showJoinButton) {\n                const buttonId = globals.UTILS.stringHashCyrb53(pgInfo.interviewUrl);\n                const tdata = {\n                    buttonId,\n                    cssClass: pgInfo.cssClass,\n                    indeedIconUrl: globals.UTILS.extensionUrl('images/indeed_i.svg'),\n                    videoIconUrl: globals.UTILS.extensionUrl('images/video_icon.svg'),\n                    id: JOIN_BUTTON_ID,\n                    showDeleteButton: pgInfo.showDeleteButton,\n                    interviewUrl: pgInfo.interviewUrl,\n                    interviewGuid: this.#guidFromInterviewUrl(pgInfo.interviewUrl)\n                };\n\n                const html = await TEMPLATES.build('join_interview_button', tdata);\n                this.log('Add Join btn HTML', html);\n                // verify parent is still there ?\n                this.#removeExisting(JOIN_BUTTON_ID);\n                pgInfo.joinBtnInsertFn(html);\n                this.markUiImpression(buttonId, 'join_button', pgInfo.pageType, 'calendar');\n            }\n        }\n\n        #guidFromInterviewUrl(url) {\n            const matches = /([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})/i.exec(url);\n            return matches[0];\n        }\n\n        async #createInterview() {\n            let interviewInfo = this.#pageInfo.getInterviewInfoFn();\n            this.log('Info for interview', interviewInfo);\n\n            let errors = [];\n            if (!interviewInfo.timezone || !interviewInfo.gmtOffset) {\n                this.log('Missing timezone or gmtOffset!');\n                errors.push('Unable to load your timezone -- please contact support.');\n            }\n            if (!interviewInfo.date) {\n                this.log('Missing date for info!');\n                errors.push('Unable to read date or time -- please contact support.');\n            }\n            if (!interviewInfo.year) {\n                this.log('Missing year for info!');\n                errors.push('Unable to read date or time -- please contact support.');\n            }\n            if (interviewInfo.addTimeButtonExists === true) { // In monthly view a Time must be added to the event.\n                this.log('Missing start and end time info!');\n                errors.push('You must add a time for the Interview.');\n            } else {\n                if (!interviewInfo.startTime) {\n                    this.log('Missing startTime for info!');\n                    errors.push('Unable to read date or time -- please contact support.');\n                }\n                if (!interviewInfo.endTime) {\n                    this.log('Missing endTime for info!');\n                    errors.push('Unable to read date or time -- please contact support.');\n                }\n            }\n\n            if (!interviewInfo.title) {\n                this.log('Missing title for info!');\n                errors.push('You must fill out the event title for the Interview');\n            }\n            if (errors.length) return this._error(errors);\n\n            UI.loading('Generating Interview link');\n            interviewInfo.language = navigator.language;\n            this._setApiCallTimer();\n\n            RELAY.send('generate.interview', RELAY.levels.iframe,\n                {info: interviewInfo, pageType: this.#pageInfo.pageType});\n        }\n\n        #deleteInterview(guid) {\n            UI.loading('Deleting interview');\n            this.log('Delete interview by guid', guid);\n            RELAY.send('delete.interview', RELAY.levels.iframe, {guid, pageType: this.#pageInfo.pageType});\n        }\n\n        _bindEvents() {\n            $(document.body).on('click.zapinfo', `#${CREATE_BUTTON_ID}`, (e) => {\n                if(globals.CONTENT_UTILS.isOrphaned) return;\n                e.stopImmediatePropagation();\n                e.preventDefault();\n                if ($(e.target).closest(`#${CREATE_BUTTON_ID}`).hasClass(CSS_DISABLED_CLASS)) return;\n                this.#createInterview();\n            }).on('click.zapinfo', `#${DELETE_BUTTON_ID}`, (e) => {\n                if(globals.CONTENT_UTILS.isOrphaned) return;\n                e.stopImmediatePropagation();\n                e.preventDefault();\n                this.#deleteInterview($(e.target).closest(`#${JOIN_BUTTON_ID}`).data('guid'));\n            }).on('click.zapinfo', `#${JOIN_BUTTON_ID} .indeed_interview_join_btn`, (e) => {\n                if(globals.CONTENT_UTILS.isOrphaned) return;\n                const btnId = $(e.target).data('irx-id');\n                this.markUiButtonClick(btnId, 'join', this.#pageInfo.pageType, 'calendar');\n            });\n        }\n\n        _cleanupUi() {\n            let $existing = $('#' + CREATE_BUTTON_ID);\n            if ($existing.length) $existing.remove();\n        }\n\n        async #interviewGenerated(data){\n            this._clearApiCallTimer();\n\n            const html = await TEMPLATES.build('interview_body_text', data);\n\n            this.log('Interview body text generated:', html);\n            const backupText = [`Candidate URL: ${data.candidate_short_url}\\n`,\n                `Interviewer URL: ${data.lobby_url}\\n`].join('\\n');\n            this.#pageInfo.setInterviewBodyTextFn(html, (descriptionUpdated) => {\n                if (!descriptionUpdated) {\n                    RELAY.localSend('copy.clipboard', {value: backupText});\n                }\n                let msg1 = 'Interview created on Indeed. ';\n                msg1 += 'Note that the start time & date of this interview does not update on Indeed if you update this cal invite, ';\n                msg1 += 'and must be updated manually on Indeed.' + '\\n\\n';\n                let notifications = [msg1];\n                if (descriptionUpdated) {\n                    notifications.push('Access URLs have been copied to the cal description, please save the cal invite.');\n                } else {\n                    notifications.push('We were unable to insert interview URLs into event description, and they have been copied to your clipboard');\n                }\n                this._notification(notifications);\n            });\n        }\n\n        #interviewDeleted(data){\n            this._clearApiCallTimer();\n\n            // data.guid, data.deleted, data.message\n            if (!data.deleted) {\n                this.log('Unable to delete interview', data);\n                let errs = ['Unable to remove the interview details. Manually delete the interview details from your event.'];\n                errs.push(data.message);\n                return this._error(errs);\n            }\n\n            this.log('Interview successfully deleted', data);\n\n            this.#pageInfo.removeInterviewBodyTextFn((success) => {\n                $('#' + JOIN_BUTTON_ID).remove();\n                let notifications = ['This interview has been successfully deleted from indeed.'];\n                notifications.push('We attempted to remove the invite text from your calendar description - please review and validate all invite text is removed, then save this invite.');\n                this._notification(notifications);\n            });\n        }\n\n        async _init(reminderSeen) {\n            if(!this._shouldInitialize) return;\n            this.reset();\n\n            RELAY.on('errors.interview', data => {\n                this._clearApiCallTimer();\n                this._error(data.errors);\n            });\n            RELAY.on('generated.interview', this.#interviewGenerated.bind(this));\n            RELAY.on('deleted.interview', this.#interviewDeleted.bind(this));\n\n            if (!reminderSeen){\n                const html = await TEMPLATES.build('interview_getting_started');\n                UI.modal(html);\n            }\n        }\n    }\n\n    globals.Interview = Interview;\n\n})(IRX);\n\n/* globals IRX */\n\n(async (globals) => {\n\n    let _forCopySelectInput = (input) => {\n        if (input.tagName.toLowerCase() == 'div') {\n            let range = document.createRange();\n            range.selectNodeContents(input);\n            let sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        } else {\n            input.select();\n        }\n    };\n\n    let _forCopyInput = (isHtml, val = null, copy = false) => {\n        let hideStyle = 'width:0; height: 0; overflow: hidden;',\n            input;\n        if (isHtml) {\n            input = document.createElement('div');\n            input.contentEditable = true;\n            input.innerHTML = val;\n            input.setAttribute('style', hideStyle);\n            document.body.appendChild(input);\n            input.focus();\n            _forCopySelectInput(input);\n        } else {\n            input = document.createElement('textarea');\n            input.setAttribute('style', hideStyle);\n            input.value = val;\n            document.body.appendChild(input);\n            input.focus();\n            _forCopySelectInput(input);\n        }\n        if (copy) {\n            document.execCommand('copy');\n        } else {\n            document.execCommand('paste');\n        }\n        return input;\n    };\n\n    function _copyToClipboard(val) {\n        let isHtml = (/<br[\\/]?>|<p>|<span>|<b>|<i>/i).test(val);\n        let input = _forCopyInput(isHtml, val, true); // copy val to clipboard\n        input.remove();\n    }\n\n    globals.RELAY.on('copy.clipboard', data => {\n        _copyToClipboard(data.value);\n    });\n\n})(IRX);\n\n/* globals IRX */\n\n(async (globals) => {\n\n    const state = globals.STATE || new globals.ContentState();\n    try{\n        // initialize frame Bridge, state, store, etc\n        await state.setup();\n    }catch(e){\n        return console.error(e);\n    }\n\n    let irxInterview;\n    let configTemplate;\n\n    globals.CONTENT_UTILS.onOrphaned(() => {\n        console.info('Content script orphaned, removing interview functionality!');\n        if(irxInterview){\n            irxInterview.cleanup();\n            irxInterview = null;\n        }\n    });\n\n    state.onUserChange(async (loggedIn, userInfo) => {\n        if(globals.CONTENT_UTILS.isOrphaned) return;\n\n        // Function called when user has changed (log in, log out, proctor updated, etc)\n\n        if(irxInterview) irxInterview.cleanup();\n        if(!loggedIn){\n            if(irxInterview) irxInterview.cleanup();\n            irxInterview = null;\n            return;\n        }\n\n        const {proctorGroups, preferences, reminders} = userInfo;\n        console.info('onUserChange: logged In!', proctorGroups, preferences, reminders);\n        \n        if(!preferences.interviewEnabled){\n            console.info('IRX interview not enabled, turned off in preferences');\n            return;\n        }\n\n        const reminderKey = 'interviewGettingStarted';\n        let reminderSeen = reminders[reminderKey] === true;\n        console.info('IRX Interview initialize, user logged in! Reminder seen? ', reminderSeen);\n\n        try{\n            configTemplate = configTemplate || await globals.configTemplates.get('interview', false);\n        }catch(e){\n            return console.error(e);\n        }\n\n        irxInterview = new globals.Interview(reminderSeen, configTemplate);\n        if(!reminderSeen) state.markReminderSeen(reminderKey);\n    });\n\n    globals.STATE = state;\n})(IRX);\n"]}