{"version":3,"sources":["manifest_extension_bridge_bundle.js"],"names":["globals","frameBridge","FrameBridge","LOGGER","setFrameId","frameId","state","ExtensionState","version","bridgeIframeUrl","getRemoteUrl","setupRemote","init","e","console","error","markReady","STATE","IRX"],"mappings":"AAEA,OAAQA,UAEJ,MAAMC,YAAc,IAAID,QAAQE,aAAY,GAC5CF,QAAQG,OAAOC,WAAWH,YAAYI,SAItC,MAAMC,MAAQ,IAAIN,QAAQO,gBAAe,EAAMN,YAAYO,SAG3D,IACI,MAAMC,gBAAkBH,MAAMI,aAAa,kCACrCT,YAAYU,YAAYF,uBACxBH,MAAMM,MAAK,GACpB,MAAMC,GAEH,YADAC,QAAQC,MAAM,kCAAmCF,GAKrDZ,YAAYe,YAEZhB,QAAQiB,MAAQX,OAtBpB,CAwBGY","file":"manifest_extension_bridge_bundle.js","sourcesContent":["/* globals IRX */\n\n(async (globals) => {\n\n    const frameBridge = new globals.FrameBridge(false);\n    globals.LOGGER.setFrameId(frameBridge.frameId);\n\n    // Initialize the state/store\n    // console.log('FRAME ID IS', frameBridge.frameId);\n    const state = new globals.ExtensionState(true, frameBridge.version);\n\n    // initialize the state, and check/fetch login details\n    try{\n        const bridgeIframeUrl = state.getRemoteUrl('src/core/coreIframe.html');\n        await frameBridge.setupRemote(bridgeIframeUrl);\n        await state.init(true);\n    }catch(e){\n        console.error('Unable to init Extension state!', e);\n        return;\n    }\n\n    // callback to alert content script that bridge is fully setup and ready\n    frameBridge.markReady();\n\n    globals.STATE = state;\n\n})(IRX);\n"]}