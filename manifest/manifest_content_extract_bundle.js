(async globals=>{let _forCopySelectInput=input=>{if("div"==input.tagName.toLowerCase()){let range=document.createRange();range.selectNodeContents(input);let sel=window.getSelection();sel.removeAllRanges(),sel.addRange(range)}else input.select()};function _copyToClipboard(val){let input=((isHtml,val=null,copy=!1)=>{let input,hideStyle="width:0; height: 0; overflow: hidden;";return isHtml?(input=document.createElement("div"),input.contentEditable=!0,input.innerHTML=val,input.setAttribute("style",hideStyle),document.body.appendChild(input),input.focus(),_forCopySelectInput(input)):(input=document.createElement("textarea"),input.setAttribute("style",hideStyle),input.value=val,document.body.appendChild(input),input.focus(),_forCopySelectInput(input)),copy?document.execCommand("copy"):document.execCommand("paste"),input})(/<br[\/]?>|<p>|<span>|<b>|<i>/i.test(val),val,!0);input.remove()}globals.RELAY.on("copy.clipboard",(data=>{_copyToClipboard(data.value)}))})(IRX),(async globals=>{const UI=globals.UI,$=globals.$;class PageFeatureBaseClass extends EventableClass{_featureName;_configTemplate;_mutationObserver;_initialized=!1;_eventsBound=!1;_wasApiTimeout=!1;_apiTmo;_uiCheckInterval;_uiImpressionIdBlocklist=[];constructor(featureName,debug,uiCheckInterval=null,configTemplate=null){super(debug,EventableClass.levels.content),this._featureName=featureName,this._configTemplate=configTemplate,this._uiCheckInterval=uiCheckInterval,this.log(`Page feature component setup, has UI? ${this.hasUi}`)}get hasUi(){return null!==this._uiCheckInterval}get lastApiCallFailed(){return this._wasApiTimeout}get _shouldInitialize(){return!this._initialized&&(this._initialized=!0,this.log("Running init"),!0)}get#shouldBindEvents(){return!!this.hasUi&&(!this._eventsBound&&(this._eventsBound=!0,this.log("Binding events"),!0))}markUiButtonClick(componentId,componentName,site,sitePage,surface=null,refId=null){const action=`${componentName}_button_clicked`;this.featureEvent(this._featureName,action,site,sitePage,surface,refId)}markUiImpression(componentId,componentName,site,sitePage=null,surface=null,refId=null){const action=`${componentName}_impression`;setTimeout((()=>{if($(`[data-irx-id="${componentId}"]`).length){if(this._uiImpressionIdBlocklist.includes(componentId))return this.logNoStore("No impression track for ID, still in blocklist.");this._uiImpressionIdBlocklist.push(componentId),setTimeout((()=>{const index=this._uiImpressionIdBlocklist.indexOf(componentId);-1!==index&&this._uiImpressionIdBlocklist.splice(index,1)}),15e3),this.log("Marking UI impression for component!",componentName,componentId),this.featureEvent(this._featureName,action,site,sitePage)}}),1e3)}cleanup(cleanupListeners=!0){this._clearApiCallTimer(),this._cleanupUi(),cleanupListeners&&this._cleanupMessageListeners(),this.hasUi&&this._mutationObserver&&this._mutationObserver.disconnect()}_init(){throw new Error("Class must implement _init")}_bindEvents(){throw new Error("Class must implement _bindEvents")}_bindMessageListeners(){}_cleanupUi(){if(this.hasUi)throw new Error("Class must implement _cleanupUi")}_cleanupMessageListeners(){}_uiChange(){if(this.hasUi)throw new Error("Class must implement _uiChange")}reset(){this.cleanup(!1),this._initialized&&(this.log("Reset called"),this.#shouldBindEvents&&this._bindEvents(),this._bindMessageListeners(),this.hasUi&&(this.log("Setting up mutationObserver"),this._mutationObserver=new MutationObserver(globals.UTILS.debounce(this._uiChange.bind(this),this._uiCheckInterval)),this._mutationObserver.observe(document.getElementsByTagName("body")[0],{attributes:!1,childList:!0,subtree:!0}),this._uiChange()),document.getElementById("irxGoogleFont")||$("head").append('<link rel="preconnect" href="https://fonts.googleapis.com" id="irxGoogleFont">').append('<link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin>').append('<link href="https://fonts.googleapis.com/css2?family=Noto+Sans&display=swap" rel="stylesheet">'))}_setApiCallTimer(){this._wasApiTimeout=!1,this._apiTmo=setTimeout(this.#apiTimeout.bind(this),1e4)}_clearApiCallTimer(){clearTimeout(this._apiTmo)}#apiTimeout(){this._wasApiTimeout=!0,globals.IS_DEV&&console.error("API Timeout!"),this.log("Error occurred calling API, timeout after 10000 ms"),this._error("An error occured. Please contact support if the issue persists")}_notification(notifications){this.log("NOTIFICATIONS",notifications),UI.notification(notifications)}_error(errors){this.log("ERRORS",errors),UI.error(errors)}}globals.PageFeatureBaseClass=PageFeatureBaseClass})(IRX),(async globals=>{const RELAY=globals.RELAY,UI=globals.UI,GENERIC_ERROR_MESSAGE="There was an issue loading the needed extraction information. Please try again.",PAGE_EXTRACT_MANIFEST_DEPENDENCIES=["page_primary_bundle","page_extract_bundle"],$=globals.$;let _pageAdvertiserKey,_pageScriptsInjected;const EXTRACT_TYPES=Object.freeze({hosted:"hosted",resume:"resume"}),EXTRACT_PAGES=Object.freeze({candidateViewPage:"candidateViewPage",employerCandidateList:"employerCandidateList",individualResume:"individualResume",projectPage:"projectPage"});class Extract extends PageFeatureBaseClass{#advertiserKey;#toConnectedSystem=!1;#xcom;constructor(advertiserKey,configTemplate){super("extract",!1,null,configTemplate),this.#advertiserKey=advertiserKey,this._init()}_bindMessageListeners(){RELAY.on("start.extract",this.#startExtract.bind(this)),RELAY.on("clipSaved.extract",(data=>{this._clearApiCallTimer(),this.#showPostExtract(data.batchId)})),RELAY.on("errors.extract",(data=>{this._clearApiCallTimer(),this._error(data.errors)})),globals.CONTENT_UTILS.bindChromeEventListener(chrome.runtime.onMessage,this.#onMessage,this)}_cleanupMessageListeners(){RELAY.offAll("extract"),globals.CONTENT_UTILS.unbindChromeEventListener(chrome.runtime.onMessage,this.#onMessage)}_init(){this._shouldInitialize&&this.reset()}async#onMessage(msg){if("popup.extract"===msg)return this.#startExtract({toConnectedSystem:!1}),Promise.resolve()}#showPostExtract(batchId){this.log("Show post extract",batchId);this.#doXcom(`/hosted-jobs-extract/iframe-modal/post-extract/batch/${batchId}`,this.#buildXcomMeta(),"Your record was extracted but there was an error displaying it. Please view it in your IRX clipboard.")}async#doXcom(url,metadata,failureMessage=GENERIC_ERROR_MESSAGE){this.#xcom=new globals.XcomShim(url,metadata),await this.#xcom.setup();try{await this.#xcom.done(),UI.close()}catch(e){console.error(e),this.log("Error creating/comming with xcom!",e.toString()),UI.error(failureMessage)}this.#xcom=null}async#startExtract(data){const{toConnectedSystem}=data;let pageExtractInfo;this.#toConnectedSystem=toConnectedSystem;try{if(pageExtractInfo=await this.constructor.determineExtractPageType(window.location.href),!pageExtractInfo)throw new Error("Empty pageExtractInfo")}catch(e){return this.log("Unale to get pageExtractInfo",e),UI.error(GENERIC_ERROR_MESSAGE)}const{type,page,subsource}=pageExtractInfo.info,isHosted=type===EXTRACT_TYPES.hosted;if(type===EXTRACT_TYPES.resume){const CT=this._configTemplate.extract.resume;if(page===EXTRACT_PAGES.individualResume){this.log("Individual resume page detected.");const resumeKey=window.location.pathname.split("/").pop();if(this.log("Resume key from URL",resumeKey),!resumeKey)return this.log("Error extracting resumeKey from url!"),UI.genericError();const interested=!!$(CT.individualResume.interestedSel).length;if(this.log("Contact is interested?",interested),!interested)return UI.error("Only interested contacts can be extracted.");const fullName=$(CT.individualResume.fullNameSel).text();return this.#saveIndividualClip(subsource,{indeed_resume_account_key:resumeKey,full_name:fullName})}if(page===EXTRACT_PAGES.projectPage){if(window.location.pathname.includes("/jobseekers/")){this.log("Resume projects page, individual resume view");const resumeKey=window.location.pathname.split("/jobseekers/").pop();if(this.log("Resume account key from URL",resumeKey),!resumeKey)return this.log("Error extracting resumeKey from url!"),UI.genericError();const interested=!!$(CT.projectPage.individual.interestedSel).length;if(this.log("Contact is interested?",interested),!interested)return UI.error("Only interested contacts can be extracted.");const fullName=$(CT.projectPage.individual.fullnameSel).text();return this.#saveIndividualClip(subsource,{indeed_resume_account_key:resumeKey,full_name:fullName})}this.log("Resume projects page, list view");const projectKey=window.location.pathname.split("/").filter((v=>!!v)).pop();if(this.log("Project key from URL",projectKey),!projectKey)return this.log("Error detecting project key from URL!"),UI.genericError();const url="/resume-extract/iframe-modal/form",metadata={project_key:projectKey,advertiser_key:this.#advertiserKey};this.#doXcom(url,this.#buildXcomMeta(metadata))}}else if(isHosted){if(page===EXTRACT_PAGES.candidateViewPage){this.log("Hosted candidate view individual page detected");const candidateKey=globals.UTILS.getQueryParam("id")||globals.UTILS.getQueryParam("id",window.location.hash);return candidateKey?this.#saveIndividualClip(subsource,{indeed_hosted_candidate_key:candidateKey}):(this.log("Error detecting candidate key from URL!"),UI.genericError())}if(page===EXTRACT_PAGES.employerCandidateList){this.log("Hosted candidate list page");let jobKey=globals.UTILS.getQueryParam("id")||globals.UTILS.getQueryParam("id",window.location.hash);const isAllOpenPausedInUi=0!==$(this._configTemplate.extract.hosted.openAndPausedSel).length;if(this.log("Job key from URL",jobKey),this.logNoStore("Is open paused in UI?",isAllOpenPausedInUi),isAllOpenPausedInUi&&"0"!==jobKey&&(jobKey="0",this.log("Edge case detected, switching to all open/paused job key!")),!jobKey)return this.log("Error detecting job key from URL!"),UI.genericError();const url="/hosted-jobs-extract/iframe-modal/form",metadata={hosted_job_id:jobKey,advertiser_key:this.#advertiserKey,status_name:globals.UTILS.getQueryParam("statusName")};this.#doXcom(url,this.#buildXcomMeta(metadata))}}}#buildXcomMeta(obj={}){let meta={};return Object.assign(meta,obj),Object.assign(meta,{pushDirectlyToIntegrations:this.#toConnectedSystem,extensionManifestVersion:3}),meta}#saveIndividualClip(subsource,data){const clipData={subsource,data};this.logNoStore("Generated clip data",clipData),UI.loading("Saving record."),this._setApiCallTimer(),RELAY.send("saveClip.extract",RELAY.levels.iframe,{clipData})}static async#loadPageScripts(){if(!_pageScriptsInjected){const origin="chrome-extension://kiodpphbmnmcmnfgpnmkkhmkllnlflef/";await globals.UTILS.loadScriptDependencies(origin,PAGE_EXTRACT_MANIFEST_DEPENDENCIES),_pageScriptsInjected=!0}}static getCurrentPageAdvertiserKey(){return new Promise((async(resolve,reject)=>{try{if(await this.#loadPageScripts(),_pageAdvertiserKey=_pageAdvertiserKey||(await globals.UTILS.relayOnOnceAwait("requestAdvertiserKey.extract",RELAY.levels.page,null,"returnAdvertiserKey.extract")).advertiserKey,!_pageAdvertiserKey)throw new Error("Empty _pageAdvertiserKey")}catch(e){return reject(e)}resolve(_pageAdvertiserKey)}))}static determineExtractPageType(url){return new Promise((async(resolve,reject)=>{let supportInfo;try{if(supportInfo=await globals.UTILS.relayOnOnceAwait("requestInfoForPage.extract",RELAY.levels.iframe_shim,{url},"returnInfoForPage.extract"),!supportInfo)throw new Error("Empty supportInfo")}catch(e){return reject(e)}resolve(supportInfo)}))}static get types(){return EXTRACT_TYPES}static get pages(){return EXTRACT_PAGES}}globals.Extract=Extract})(IRX),(async globals=>{const TEMPLATES=globals.TEMPLATES,SELECTOR_ID="irx_inline_extract_button",EXTRACT=globals.Extract,$=globals.$;class PageButtons extends PageFeatureBaseClass{#pageExtractInfo;#wasIndividualResume=!1;#integrations=[];#reminders=[];constructor(integrations,reminders,configTemplate){super("extract_button",!1,500,configTemplate),this.logNoStore("initialized with reminders",globals.UTILS.cloneObject(reminders)),this._init(integrations,reminders)}get connectedSystemInfo(){let response={show:!1,disabled:!1,label:"Connected Systems"};return this.#integrations.length?(response.show=!0,1===this.#integrations.length&&(this.#integrations[0].lastPausedAt?(response.label=this.#integrations[0].label+" (Paused) ",response.disabled=!0):response.label="Push to "+this.#integrations[0].label),response):response}#determinePageSupport(){return new Promise((async resolve=>{let info={insertFn:null,wrapSel:null,buttonStyle:"",updateFn:null,forceRedraw:!1,testFn:null,customCssRule:null};const pageExtractInfo=await EXTRACT.determineExtractPageType(window.location.href);if(this.#pageExtractInfo=pageExtractInfo,this.log("pageExtractInfo",pageExtractInfo),!pageExtractInfo||!pageExtractInfo.info)return resolve(null);const{type,page}=pageExtractInfo.info,isHosted=type===EXTRACT.types.hosted,isResume=type===EXTRACT.types.resume,CT=this._configTemplate.buttons;isHosted&&(page===EXTRACT.pages.candidateViewPage?(info.wrapSel=CT.hosted.candidateViewPage.wrapSel,info.buttonStyle=CT.hosted.candidateViewPage.style):page===EXTRACT.pages.employerCandidateList&&(info.wrapSel=CT.hosted.employerCandidateList.wrapSel,info.buttonStyle=CT.hosted.employerCandidateList.style,info.insertFn=($wrap,html)=>{$wrap.nextAll(CT.hosted.employerCandidateList.insertFn.nextAll).find(CT.hosted.employerCandidateList.insertFn.find).before(CT.hosted.employerCandidateList.insertFn.before.replace("{{HTML}}",html))})),isResume&&(page===EXTRACT.pages.individualResume?(info.wrapSel="todo",info.buttonStyle="todo"):page===EXTRACT.pages.projectPage&&($(CT.projectPage.individual.selectorSel).length?(this.#wasIndividualResume||(info.forceRedraw=!0),this.#wasIndividualResume=!0,info.wrapSel=CT.projectPage.individual.wrapSel,info.buttonStyle=CT.projectPage.individual.style,info.testFn=()=>$(CT.projectPage.individual.testInterestedFnSel).length):(this.#wasIndividualResume=!1,info.wrapSel=CT.projectPage.list.wrapSel,info.buttonStyle=CT.projectPage.list.style,$(CT.projectPage.list.parentSel).closest(CT.projectPage.list.parentClosestSel).addClass(CT.projectPage.list.customParentClass),info.customCssRule=CT.projectPage.list.customParentRule,info.testFn=()=>{const filterParam=globals.UTILS.getQueryParam("filter")||"",fromParam=globals.UTILS.getQueryParam("from")||"";return["interested","replied"].includes(filterParam)||fromParam.startsWith("interested.email")}))),resolve(info)}))}async _uiChange(){this.log("uiChange");const buttonInfo=await this.#determinePageSupport();this.logNoStore("button info result",buttonInfo);const $existing=$(`#${SELECTOR_ID}`),wasExisting=$existing.length;if(!buttonInfo)return $existing.length&&this._cleanupUi(),this.logNoStore("Removing existing button and returning.");if(buttonInfo.testFn&&!buttonInfo.testFn())return $existing.length&&this._cleanupUi(),this.log("No draw, did not pass test function");if($existing.length){if(!buttonInfo.forceRedraw)return this.logNoStore("Button exists, not drawing again");this._cleanupUi()}if(!$(buttonInfo.wrapSel).length)return this.log("No draw, wrapSel missing!");const csInfo=this.connectedSystemInfo;buttonInfo.customCssRule&&this.#addCustomCssStyleToPage(buttonInfo.customCssRule);const buttonId=Date.now(),templateData={buttonId,pushLabel:csInfo.label,showApiButton:csInfo.show,id:SELECTOR_ID,buttonStyle:buttonInfo.buttonStyle,disabled:csInfo.disabled},html=await TEMPLATES.build("extract_button",templateData);this.logNoStore("Add HTML",html);const $wrap=$(buttonInfo.wrapSel);if(!$wrap.length)return this.logNoStore("Wrap missing after template generation, not inserting button");if(buttonInfo.insertFn?buttonInfo.insertFn($wrap,html):$wrap.append(html),buttonInfo.updateFn&&buttonInfo.updateFn($wrap),this.#drawReminder(),!wasExisting){const{type,page}=this.#pageExtractInfo.info;this.markUiImpression(buttonId,"create_button","indeed",type,page)}}async#drawReminder(){const{type,page}=this.#pageExtractInfo.info,reminderKey=`${type}_${page}`;if(this.log("Checking reminder key to draw reminder for",reminderKey,this.#reminders[reminderKey]),this.#reminders[reminderKey])return this.log("not showing reminder, already seen");const html=await TEMPLATES.build("extract_getting_started");globals.UI.modal(html),this.#reminders[reminderKey]=!0,globals.RELAY.localSend("markReminderSeen.state",{keys:[reminderKey]})}_cleanupUi(){const $existing=$("#"+SELECTOR_ID);$existing.length&&$existing.remove()}_init(integrations,reminders){this._shouldInitialize&&this.reset(integrations,reminders)}reset(integrations,reminders){this.#integrations=integrations||[],this.#reminders=reminders,super.reset()}#startExtract(buttonId,toConnectedSystem=!1){this.log(`Initialize extract - (for connected system push? ${toConnectedSystem?"true":"false"})`);const{type,page}=this.#pageExtractInfo.info;this.markUiButtonClick(buttonId,"extract","indeed",type,page),globals.RELAY.localSend("start.extract",{toConnectedSystem})}_bindEvents(){$(document.body).on("click.irx",`#${SELECTOR_ID} #irx_inline_extract_btn`,(e=>{if(globals.CONTENT_UTILS.isOrphaned)return;e.stopImmediatePropagation();const buttonId=$(e.target).data("irx-id");this.#startExtract(buttonId)})).on("click.irx",`#${SELECTOR_ID} #irx_connected_push_extract_button`,(e=>{if(globals.CONTENT_UTILS.isOrphaned)return;e.stopImmediatePropagation();const buttonId=$(e.target).data("irx-id");this.#startExtract(buttonId,!0)}))}#addCustomCssStyleToPage(cssRule){document.getElementById("irx_button_custom_style_rule")?.remove();let style=document.createElement("style");style.setAttribute("id","irx_button_custom_style_rule"),document.getElementsByTagName("head")[0].appendChild(style),style.sheet.insertRule(cssRule)}}globals.PageButtons=PageButtons})(IRX),(globals=>{const TEMPLATES=globals.TEMPLATES,UI=globals.UI,RELAY=globals.RELAY;class XcomShim extends LoggableClass{#id;#metadata;#url;#errored=!1;#errorCb;#doneCb;constructor(url,metadata){super(!1),this.#id=(new Date).getTime(),this.#metadata=metadata,this.#url=this.#addIdAndDataParams(url),this.#setupRelay()}#addIdAndDataParams(url){let urlParts=url.split("?",2),params=new URLSearchParams(urlParts.length>1?urlParts.pop():"");return params.append("xcomId",this.#id),params.append("data",JSON.stringify(this.#metadata)),urlParts+"?"+params.toString()}#setupRelay(){RELAY.onOnce("exit.xcomShim",(()=>{this.log("exit.xcomShim"),this.teardown()})),RELAY.on("error.xcomShim",(data=>{this.#errored=!0,this.log("Error in iframe shim",data.error),this.teardown(!1),this.#errorCb&&this.#errorCb(data.error)}))}setup(){return new Promise((async resolve=>{const templateData={id:this.#id,url:this.#url,data:JSON.stringify(this.#metadata)},html=await TEMPLATES.build("xcom_shim",templateData);document.getElementsByTagName("body")[0].classList.add("irx_noscroll"),UI.fullpageUi(html),resolve()}))}done(){return new Promise(((resolve,reject)=>{if(this.#errored)return reject();this.#errorCb=reject,this.#doneCb=resolve}))}teardown(isDone=!0){document.getElementsByTagName("body")[0].classList.remove("irx_noscroll"),this.log("teardown"),globals.RELAY.offAll("xcomShim"),this.#doneCb&&isDone&&(this.#doneCb(),this.#doneCb=null)}}globals.XcomShim=XcomShim})(IRX),(async globals=>{const state=globals.STATE=globals.STATE||new globals.ContentState;try{await state.setup()}catch(e){return console.error(e)}let pageButtons,extract,configTemplate;globals.CONTENT_UTILS.onOrphaned((()=>{console.info("Content script orphaned, removing extract functionality!"),pageButtons&&(pageButtons.cleanup(),pageButtons=null),extract&&(extract.cleanup(),extract=null)})),state.onUserChange((async(loggedIn,userInfo)=>{console.log("IRX onUserChang, logged In?",loggedIn,userInfo);let pageAdvertiserKey,advertisersMatch=!0;try{pageAdvertiserKey=await globals.Extract.getCurrentPageAdvertiserKey()}catch(e){return console.error(e)}if(pageAdvertiserKey!==userInfo.advertiserKey&&(advertisersMatch=!1,console.log("Current user advertiser doesn't match page advertiser",pageAdvertiserKey,userInfo.advertiserKey)),pageButtons&&pageButtons.cleanup(),extract&&extract.cleanup(),!loggedIn||!advertisersMatch)return pageButtons&&(pageButtons=null),void(extract&&(extract=null));try{configTemplate=configTemplate||await globals.configTemplates.get("extract")}catch(e){return console.error(e)}console.log("IRX extract initiliazed, user logged in!");const{integrations,reminders}=userInfo;pageButtons?pageButtons.reset(integrations,reminders):pageButtons=new globals.PageButtons(integrations,reminders,configTemplate),extract?extract.reset():extract=new globals.Extract(state.advertiserKey,configTemplate)}))})(IRX);
//# sourceMappingURL=manifest_content_extract_bundle.js.map
