(async globals=>{const RELAY=globals.RELAY,dashboardUrl=globals.ExtensionState.getApiInfoForEnv(await globals.storeUtils.get("env")||"production").dashboardUrl;class XcomShim extends LoggableClass{constructor(){super(!1);const url=globals.UTILS.getQueryParam("url");if(!url)return this._error("No url supplied to load for xcom!");if(this._id=globals.UTILS.getQueryParam("xcomId",url.split("?").pop()),!this._id)return this._error("No xcomId in supplied URL");try{this._metadata=JSON.parse(globals.UTILS.getQueryParam("data")),this.log("Data from URL",this._metadata)}catch(e){this._error(e)}RELAY.on(`${this._id}_ready.legacyXcom`,(()=>{this.log("legacy xcom ready.",this._id),RELAY.send(`${this._id}_setMetadata.legacyXcom`,RELAY.levels.iframe,this._metadata),this.xcom.isLoaded()})),RELAY.on(`${this._id}_openTab.legacyXcom`,(data=>{globals.extensionUtils.openUrl(data.url,data.active)})),RELAY.on(`${this._id}_exit.legacyXcom`,(()=>{RELAY.send("exit.xcomShim",RELAY.levels.content)})),RELAY.on("error.xcomWindow",(data=>{this._error(data.error)})),this.xcom=new globals.XComWindow(this._metadata,"commShim"),this.xcom.setWindowURL(dashboardUrl+url)}_error(e){this.log("Error in shim!",e),RELAY.send("error.xcomShim",RELAY.levels.content,{error:e.toString()})}}globals.XCOM_SHIM=new XcomShim})(IRX);
//# sourceMappingURL=manifest_xcom_shim_bottom_bundle.js.map
