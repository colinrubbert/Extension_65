(globals=>{class LogTools extends LoggableClass{constructor(){super(!1,!1)}#purgeForLength(logRows){return logRows.slice(0,Math.min(1e4,logRows.length))}#removeOld(logRows){let purgeFromTs=(new Date).getTime()-864e5,numPurged=0;const filtered=logRows.filter((row=>!(row.ts<purgeFromTs)||(numPurged++,!1)));return this.log(`Purged ${numPurged} old log rows. (of ${logRows.length})`),filtered}#sortRows(logRows){logRows.sort(((a,b)=>b.ts-a.ts))}async clear(){const storeItems=await globals.storeUtils.getAll(),clearKeys=this.#filterToLogSetKeys(storeItems).concat(["_LOGS"]);return this.log("Clearing all log keys",clearKeys),globals.storeUtils.delete(clearKeys)}async getAll(){return await this.combineAndPurge(),globals.storeUtils.get("_LOGS")}#filterToLogSetKeys(keys){return Array.isArray(keys)||(keys=Object.keys(keys)),keys.filter((k=>k.startsWith("LOGS_")))}combineAndPurge(){return new Promise((async resolve=>{this.log("Running combine & purge.");const storeItems=await globals.storeUtils.getAll(),logSetKeys=this.#filterToLogSetKeys(storeItems);this.log("Storage keys for logs",logSetKeys),logSetKeys.length&&await globals.storeUtils.delete(logSetKeys);let prevCombinedRows=storeItems._LOGS||"",logRows=prevCombinedRows;logSetKeys.forEach((key=>{logRows+="\n"+storeItems[key]}));let logRowsArr=logRows.split("\n").filter((v=>""!==v)).map((row=>JSON.parse(row)));if(logRowsArr=this.#removeOld(logRowsArr),logRowsArr=this.#purgeForLength(logRowsArr),this.#sortRows(logRowsArr),!logRowsArr.length)return this.log("Combine not writing anything, no rows to write.");await globals.storeUtils.set("_LOGS",logRowsArr.map((row=>JSON.stringify(row))).join("\n")),this.log(`Adding ${logSetKeys.length} sets, ${logRowsArr.length} total rows (${prevCombinedRows.split("\n").length} previously).`),resolve(logRowsArr)}))}async getSize(readable=!0){const storeItems=await globals.storeUtils.getAll(),logSetKeys=this.#filterToLogSetKeys(storeItems);const b=await chrome.storage.local.getBytesInUse("_LOGS")+await chrome.storage.local.getBytesInUse(logSetKeys),k=b>0?Math.floor(Math.log2(b)/10):0,rank=(k>0?"KMGT"[k-1]:"")+"b",count=Math.floor(b/Math.pow(1024,k));return readable?`${count} ${rank}`:b}#readbleRows(logRows){return logRows.map((row=>`${row.ts_readable} : ${row.context} [${row.process}] >>> ${JSON.stringify(row.data)}`)).join("\n")}getLogsDataUri(){return new Promise((async resolve=>{let logRows=await this.combineAndPurge();resolve("data:text/plain;base64,"+btoa(this.#readbleRows(logRows)))}))}getLogs(asText=!1){return new Promise((async resolve=>{let logRows=await this.combineAndPurge();asText&&(logRows=this.#readbleRows(logRows)),resolve(logRows)}))}}globals.LOG_TOOLS=new LogTools})(IRX),(globals=>{class Notifications extends globals.EventableClass{constructor(eventableClassLevel){super(!1,eventableClassLevel)}async trackFeatureEventFromCount(count){let isShown=await this.isBadgeCurrentlyVisible();const isPinned=await globals.extensionUtils.isExtensionIconPinned();let featureActionName;isShown&&0===count?(await this.#markBadgeAsCleared(),featureActionName="taskbar_badge_cleared_"+(isPinned?"pinned":"unpinned")):!isShown&&count>0&&(await this.#markBadgeAsShown(),featureActionName="taskbar_badge_impression_"+(isPinned?"pinned":"unpinned")),featureActionName&&(this.log("Logging feature event for notification:",featureActionName),await this.featureEvent("notifications",featureActionName))}isBadgeCurrentlyVisible(){return globals.storeUtils.get("taskbarBadgeShown")||!1}#markBadgeAsShown(){globals.storeUtils.set("taskbarBadgeShown",!0)}#markBadgeAsCleared(){return globals.storeUtils.set("taskbarBadgeShown",!1)}test(){return"foo"}}globals.Notifications=Notifications})(IRX),(globals=>{class IframeBindings extends EventableClass{#boundListeners={};#componentName;#notifications=new globals.Notifications(EventableClass.levels.popup);constructor(state,componentName){super(globals.UTILS.isQueryParamPresent("messageDebug")||!1,EventableClass.levels.popup),this.#componentName=componentName,this.#bindAll(state),this.lifecycleEvent("popup_window_opened")}trigger(msg,data=null){msg in this.#boundListeners&&this.#boundListeners[msg](data)}#msgRecieved(msg,data){this.log("::MESSAGE FROM IFRAME >> ",msg,data),this.#boundListeners[msg](data)}#send(msg,data=null){globals.RELAY.componentSend(msg,data,this.#componentName)}#bind(msg,fn,bindFunctionGlobal=!0,globalBindArgs=[]){this.#boundListeners[msg]=fn,globals.RELAY.componentOn(msg,this.#componentName,(data=>{this.#msgRecieved(msg,data)})),bindFunctionGlobal&&(this.log(`Binding global function ${msg}(${globalBindArgs})`),globals[msg]=(...args)=>{let data={};globalBindArgs.forEach(((argName,ind)=>{data[argName]=args[ind]})),args.length>0?this.#boundListeners[msg](data):this.#boundListeners[msg]()})}#bindAll(state){this.log("binding all iframe listeners"),this.#bind("setEnv",(data=>{globals.RELAY.localSend("changeEnv.state",{env:data.env})}),!0,["env"]),this.#bind("downloadLogs",(async _data=>{const fname="IRX_LOGS_"+(state.irxUserUuid||"no_user")+"_"+(new Date).getTime()+".txt",dataUri=await globals.LOG_TOOLS.getLogsDataUri();let elem=document.createElement("a");elem.setAttribute("download",fname),elem.setAttribute("href",dataUri),elem.click(),this.#send("downloadLogsResponse")})),this.#bind("purgeLogs",(async _data=>{await globals.LOG_TOOLS.clear(),this.#send("purgeLogsResponse")})),this.#bind("resetNotifications",(async()=>{await globals.storeUtils.delete("reminders"),this.#send("resetNotificationsResponse")})),this.#bind("openUrl",(async data=>{await globals.extensionUtils.openUrl(data.url,data.active),!1!==data.active&&window.close()}),!1,["url"]),this.#bind("advertiserChanged",(_data=>{console.error("DO RELOAD OF TABS"),globals.extensionUtils.reloadSupportedTabs()})),this.#bind("setIconBadgeCount",(async data=>{globals.extensionUtils.setBadgeCount(data.count),await this.#notifications.trackFeatureEventFromCount(data.count)}),["count"]),this.#bind("desktopNotification",(async _data=>{})),this.#bind("extract",(async _data=>{let tabs=await chrome.tabs.query({active:!0,currentWindow:!0});if(!tabs||!tabs.length)return console.error("No available tabs");await chrome.tabs.sendMessage(tabs[0].id,"popup.extract"),window.close()})),this.#bind("openPopupAsWindow",(async()=>{globals.extensionUtils.openPopupDebugWindow(),window.close()}),!0),this.#bind("markReminderSeen",(async data=>{await state.markReminderSeen(data.reminderKey),this.#send("markReminderSeenResponse",{reminderKey:data.reminderKey})}),!0,["reminderKey"]),this.#bind("updatePreferences",(async data=>{await state.updatePreferences(data.preferences),await globals.extensionUtils.reloadSupportedTabs(),this.#send("updatePreferencesResponse")}),!0,["preferences"])}}globals.IframeBindings=IframeBindings})(IRX),(async globals=>{if(!navigator.onLine)return console.error("Computer is currently offline!"),document.getElementById("offline").style="";const frameId=(new Date).getTime();globals.LOGGER.setFrameId(frameId);const genericError=()=>{document.getElementById("generic_error").style=""};document.getElementById("reload_extension").addEventListener("click",(async()=>{await globals.extensionUtils.restartIfAllowed(0)}));const xcom=new globals.XComWindow({},"irxPopup",genericError);let version;try{version=await globals.ExtensionState.awaitRemoteVersion()}catch(e){if(e instanceof globals.ExtensionVersionError)return genericError()}const state=globals.STATE=new globals.ExtensionState(!0,version);try{await state.init()}catch(e){if(xcom.clearLoading(),e instanceof globals.ExtensionVersionError){document.getElementById("needs_update").style="";return void(document.getElementById("update_url").href=globals.UTILS.appendQueryParamToUrl(globals.ExtensionState.platformInfo.updateUrl,"nonce",Date.now()))}}if(!state.loggedIn&&!(await globals.authCookies.currentlySetAuthCookieKeys()).includes("PCA")){xcom.clearLoading(),document.getElementById("no_advertiser_error").style="";return void(document.getElementById("select_advertiser_url").href=globals.ExtensionState.getAdvertiserSelectionUrlForEnv(state.env))}globals.iframeBindings=new globals.IframeBindings(state,"irxPopup");let envInfo={extractAvailable:await globals.EXTRACT.extractEnabledOnCurrentPage(),stateInfo:state.info,availableEnvs:state.availbleEnvironments,version:state.version,windowUrl:window.location.href,userInfo:state.userInfo};console.info("Popup envInfo",JSON.parse(JSON.stringify(envInfo))),xcom.updateStateInfo(envInfo),xcom.setWindowURL(state.info.api.popupOnehostUrl)})(IRX);
//# sourceMappingURL=manifest_popup_bottom_bundle.js.map
