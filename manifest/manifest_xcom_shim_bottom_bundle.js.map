{"version":3,"sources":["manifest_xcom_shim_bottom_bundle.js"],"names":["globals","RELAY","dashboardUrl","ExtensionState","getApiInfoForEnv","storeUtils","get","XcomShim","LoggableClass","constructor","super","url","UTILS","getQueryParam","this","_error","_id","split","pop","_metadata","JSON","parse","log","e","on","send","levels","iframe","xcom","isLoaded","data","extensionUtils","openUrl","active","content","error","XComWindow","setWindowURL","toString","XCOM_SHIM","IRX"],"mappings":"AAEA,OAAQA,UAEJ,MAAMC,MAAQD,QAAQC,MAEhBC,aAAeF,QAAQG,eACxBC,uBAAuBJ,QAAQK,WAAWC,IAAI,QAAU,cAAcJ,aAI3E,MAAMK,iBAAiBC,cACnBC,cACIC,OAAM,GAEN,MAAMC,IAAMX,QAAQY,MAAMC,cAAc,OACxC,IAAIF,IAAK,OAAOG,KAAKC,OAAO,qCAG5B,GADAD,KAAKE,IAAMhB,QAAQY,MAAMC,cAAc,SAAUF,IAAIM,MAAM,KAAKC,QAC5DJ,KAAKE,IAAK,OAAOF,KAAKC,OAAO,6BAEjC,IACID,KAAKK,UAAYC,KAAKC,MAAMrB,QAAQY,MAAMC,cAAc,SACxDC,KAAKQ,IAAI,gBAAiBR,KAAKK,WAClC,MAAMI,GACHT,KAAKC,OAAOQ,GAMhBtB,MAAMuB,GAAG,GAAGV,KAAKE,wBAAwB,KACrCF,KAAKQ,IAAI,qBAAsBR,KAAKE,KACpCf,MAAMwB,KAAK,GAAGX,KAAKE,6BAA8Bf,MAAMyB,OAAOC,OAAQb,KAAKK,WAC3EL,KAAKc,KAAKC,cAId5B,MAAMuB,GAAG,GAAGV,KAAKE,0BAA2Bc,OACxC9B,QAAQ+B,eAAeC,QAAQF,KAAKnB,IAAKmB,KAAKG,WAIlDhC,MAAMuB,GAAG,GAAGV,KAAKE,uBAAuB,KACpCf,MAAMwB,KAAK,gBAAiBxB,MAAMyB,OAAOQ,YAG7CjC,MAAMuB,GAAG,oBAAqBM,OAC1BhB,KAAKC,OAAOe,KAAKK,UAGrBrB,KAAKc,KAAO,IAAI5B,QAAQoC,WAAWtB,KAAKK,UA1CzB,YA2CfL,KAAKc,KAAKS,aAAanC,aAAeS,KAG1CI,OAAOQ,GACHT,KAAKQ,IAAI,iBAAkBC,GAC3BtB,MAAMwB,KAAK,iBAAkBxB,MAAMyB,OAAOQ,QAAS,CAACC,MAAOZ,EAAEe,cAOrEtC,QAAQuC,UAAY,IAAIhC,UA9D5B,CAgEGiC","file":"manifest_xcom_shim_bottom_bundle.js","sourcesContent":["/* globals IRX, LoggableClass */\n\n(async (globals) => {\n\n    const RELAY = globals.RELAY;\n\n    const dashboardUrl = globals.ExtensionState\n        .getApiInfoForEnv(await globals.storeUtils.get('env') || 'production').dashboardUrl;\n\n    const COMPONENT_NAME = 'commShim';\n\n    class XcomShim extends LoggableClass {\n        constructor() {\n            super(false);\n\n            const url = globals.UTILS.getQueryParam('url');\n            if(!url) return this._error('No url supplied to load for xcom!');\n\n            this._id = globals.UTILS.getQueryParam('xcomId', url.split('?').pop());\n            if(!this._id) return this._error('No xcomId in supplied URL');\n\n            try{\n                this._metadata = JSON.parse(globals.UTILS.getQueryParam('data'));\n                this.log('Data from URL', this._metadata);\n            }catch(e){\n                this._error(e);\n            }\n\n            // ** LEGACY XCOM FUNCTIONALITY TO DASHBOARD ** //\n\n            // 'ready' is called right away from xcom component in dashboard\n            RELAY.on(`${this._id}_ready.legacyXcom`, () => {\n                this.log('legacy xcom ready.', this._id);\n                RELAY.send(`${this._id}_setMetadata.legacyXcom`, RELAY.levels.iframe, this._metadata);\n                this.xcom.isLoaded();\n            });\n\n            // 'openTab' is called when a new tab should be opened (like API push, csv extract, etc)\n            RELAY.on(`${this._id}_openTab.legacyXcom`, (data) => {\n                globals.extensionUtils.openUrl(data.url, data.active);\n            });\n\n            // 'exit' is called when user clicks 'X' or outside modal\n            RELAY.on(`${this._id}_exit.legacyXcom`, () => {\n                RELAY.send('exit.xcomShim', RELAY.levels.content);\n            });\n\n            RELAY.on('error.xcomWindow', (data) => {\n                this._error(data.error);\n            });\n\n            this.xcom = new globals.XComWindow(this._metadata, COMPONENT_NAME);\n            this.xcom.setWindowURL(dashboardUrl + url);\n        }\n\n        _error(e){\n            this.log('Error in shim!', e);\n            RELAY.send('error.xcomShim', RELAY.levels.content, {error: e.toString()});\n        }\n\n    }\n\n    // TODO!\n    //const iframeBindings = new IframeBindings(state, COMPONENT_NAME);\n    globals.XCOM_SHIM = new XcomShim();\n\n})(IRX);\n\n"]}